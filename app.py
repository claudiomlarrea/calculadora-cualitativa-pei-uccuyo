
import streamlit as st
import pandas as pd
from openai import OpenAI

# Autenticaci√≥n con tu clave API de OpenAI
client = OpenAI(api_key=st.secrets["openai"]["api_key"])

# Configuraci√≥n general
st.set_page_config(page_title="Calculadora Cualitativa PEI UCCuyo", layout="wide")
st.title("üß† Calculadora Cualitativa PEI UCCuyo")
st.markdown("Sube tu archivo Excel con actividades del PEI realizadas por todas las unidades acad√©micas y administrativas.")

# Subida de archivo
uploaded_file = st.file_uploader("üìÇ Cargar archivo Excel", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.success("‚úÖ Archivo cargado correctamente")

    st.subheader("üìä Vista previa de los datos")
    st.dataframe(df)

    # Extraer columnas con "Actividades Objetivo"
    columnas_actividades = [col for col in df.columns if 'Actividades Objetivo' in col]

    textos = []
    for col in columnas_actividades:
        textos_col = df[col].dropna().astype(str)
        textos += [t.strip() for t in textos_col if t.strip() and t.strip() != "-" and t.strip().lower() != "none"]

    if textos:
        # An√°lisis cualitativo global
        if st.button("üîç Realizar an√°lisis cualitativo global de las actividades"):
            with st.spinner("Generando an√°lisis tem√°tico y de discurso con ChatGPT..."):
                prompt = (
                    "Realiza un an√°lisis tem√°tico y del discurso de las siguientes actividades institucionales "
                    "del Plan Estrat√©gico de una universidad. Identifica temas emergentes, patrones del discurso, "
                    "preocupaciones frecuentes y objetivos institucionales clave.\n\n"
                    + "\n- " + "\n- ".join(textos)
                )
                try:
                    response = client.chat.completions.create(
                        model="gpt-4",
                        messages=[{"role": "user", "content": prompt}],
                        temperature=0.3,
                    )
                    resultado = response.choices[0].message.content
                    st.success("‚úÖ An√°lisis generado correctamente")
                    st.subheader("üìÑ Resultado del an√°lisis")
                    st.write(resultado)
                except Exception as e:
                    st.error(f"‚ùå Error al comunicarse con la API de OpenAI:\n{e}")

        # An√°lisis cualitativo por columna
        st.markdown("---")
        if st.button("üîç Realizar an√°lisis por objetivo (1 a 6)"):
            with st.spinner("Analizando columna por columna..."):
                for col in columnas_actividades:
                    textos_col = df[col].dropna().astype(str)
                    textos_filtrados = [t.strip() for t in textos_col if t.strip() and t.strip() != "-" and t.strip().lower() != "none"]
                    if textos_filtrados:
                        prompt_columna = f"""
Realiza un an√°lisis tem√°tico y del discurso profundo de las expresiones en la columna '{col}'. 
Organiza el an√°lisis en dos partes:

1. AN√ÅLISIS TEM√ÅTICO:
- Temas y subtemas emergentes.
- C√≥digos frecuentes y significativos.
- Patrones de sentido y preocupaciones comunes.

2. AN√ÅLISIS DEL DISCURSO:
- Actos de habla, relaciones de poder, tono e ideolog√≠a.
- Posicionamientos institucionales.
- Modalidades del lenguaje y sentido impl√≠cito.

Texto:
- {'\n- '.join(textos_filtrados)}
"""
                        try:
                            response = client.chat.completions.create(
                                model="gpt-4",
                                messages=[{"role": "user", "content": prompt_columna}],
                                temperature=0.3,
                            )
                            resultado_columna = response.choices[0].message.content
                            st.success(f"‚úÖ An√°lisis generado para {col}")
                            st.subheader(f"üìÑ Resultado: {col}")
                            st.write(resultado_columna)
                        except Exception as e:
                            st.error(f"‚ùå Error al analizar {col}:\n{e}")
    else:
        st.warning("‚ö†Ô∏è No se encontraron textos v√°lidos en las columnas de actividades objetivo.")
else:
    st.info("üì• Por favor, sube un archivo Excel para comenzar.")
